--- a/net/minecraft/network/protocol/common/ServerboundCustomPayloadPacket.java
+++ b/net/minecraft/network/protocol/common/ServerboundCustomPayloadPacket.java
@@ -1,7 +1,7 @@
 package net.minecraft.network.protocol.common;
 
 import com.google.common.collect.Lists;
-import net.minecraft.Util;
+import java.util.List;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.codec.StreamCodec;
 import net.minecraft.network.protocol.Packet;
@@ -11,20 +11,17 @@
 import net.minecraft.network.protocol.common.custom.DiscardedPayload;
 
 public record ServerboundCustomPayloadPacket(CustomPacketPayload payload) implements Packet<ServerCommonPacketListener> {
+
     private static final int MAX_PAYLOAD_SIZE = 32767;
-    public static final StreamCodec<FriendlyByteBuf, ServerboundCustomPayloadPacket> STREAM_CODEC = CustomPacketPayload.<FriendlyByteBuf>codec(
-            id -> DiscardedPayload.codec(id, 32767),
-            Util.make(Lists.newArrayList(new CustomPacketPayload.TypeAndCodec<>(BrandPayload.TYPE, BrandPayload.STREAM_CODEC)), types -> {
-            })
-        )
-        .map(ServerboundCustomPayloadPacket::new, ServerboundCustomPayloadPacket::payload);
+    public static final StreamCodec<FriendlyByteBuf, ServerboundCustomPayloadPacket> STREAM_CODEC = CustomPacketPayload.codec((minecraftkey) -> {
+        return DiscardedPayload.codec(minecraftkey, 32767);
+    }, java.util.Collections.emptyList()).map(ServerboundCustomPayloadPacket::new, ServerboundCustomPayloadPacket::payload); // CraftBukkit - treat all packets the same
 
     @Override
     public PacketType<ServerboundCustomPayloadPacket> type() {
         return CommonPacketTypes.SERVERBOUND_CUSTOM_PAYLOAD;
     }
 
-    @Override
     public void handle(ServerCommonPacketListener listener) {
         listener.handleCustomPayload(this);
     }
