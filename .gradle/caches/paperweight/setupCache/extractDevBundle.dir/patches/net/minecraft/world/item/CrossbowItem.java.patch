--- a/net/minecraft/world/item/CrossbowItem.java
+++ b/net/minecraft/world/item/CrossbowItem.java
@@ -80,7 +80,14 @@
     public void releaseUsing(ItemStack stack, Level world, LivingEntity user, int remainingUseTicks) {
         int i = this.getUseDuration(stack) - remainingUseTicks;
         float f = getPowerForTime(i, stack);
-        if (f >= 1.0F && !isCharged(stack) && tryLoadProjectiles(user, stack)) {
+        // Paper start
+        if (f >= 1.0F && !isCharged(stack)) {
+            final io.papermc.paper.event.entity.EntityLoadCrossbowEvent event = new io.papermc.paper.event.entity.EntityLoadCrossbowEvent(user.getBukkitLivingEntity(), stack.asBukkitMirror(), org.bukkit.craftbukkit.CraftEquipmentSlot.getHand(user.getUsedItemHand()));
+            if (!event.callEvent() || !tryLoadProjectiles(user, stack, event.shouldConsumeItem()) || !event.shouldConsumeItem()) {
+                if (user instanceof ServerPlayer player) player.containerMenu.sendAllDataToRemote();
+                return;
+            }
+        // Paper end - Add EntityLoadCrossbowEvent
             world.playSound(
                 null,
                 user.getX(),
@@ -94,8 +101,14 @@
         }
     }
 
-    private static boolean tryLoadProjectiles(LivingEntity shooter, ItemStack crossbow) {
-        List<ItemStack> list = draw(crossbow, shooter.getProjectile(crossbow), shooter);
+    @io.papermc.paper.annotation.DoNotUse // Paper - Add EntityLoadCrossbowEvent
+    private static boolean tryLoadProjectiles(LivingEntity shooter, ItemStack crossbow)  {
+        // Paper start - Add EntityLoadCrossbowEvent
+        return CrossbowItem.tryLoadProjectiles(shooter, crossbow, true);
+    }
+    private static boolean tryLoadProjectiles(LivingEntity shooter, ItemStack crossbow, boolean consume) {
+        List<ItemStack> list = draw(crossbow, shooter.getProjectile(crossbow), shooter, consume);
+        // Paper end - Add EntityLoadCrossbowEvent
         if (!list.isEmpty()) {
             crossbow.set(DataComponents.CHARGED_PROJECTILES, ChargedProjectiles.of(list));
             return true;
@@ -147,7 +160,11 @@
     @Override
     protected Projectile createProjectile(Level world, LivingEntity shooter, ItemStack weaponStack, ItemStack projectileStack, boolean critical) {
         if (projectileStack.is(Items.FIREWORK_ROCKET)) {
-            return new FireworkRocketEntity(world, projectileStack, shooter, shooter.getX(), shooter.getEyeY() - 0.15F, shooter.getZ(), true);
+            // Paper start
+            FireworkRocketEntity entity =  new FireworkRocketEntity(world, projectileStack, shooter, shooter.getX(), shooter.getEyeY() - 0.15F, shooter.getZ(), true);
+            entity.spawningEntity = shooter.getUUID(); // Paper
+            return entity;
+            // Paper end
         } else {
             Projectile projectile = super.createProjectile(world, shooter, weaponStack, projectileStack, critical);
             if (projectile instanceof AbstractArrow abstractArrow) {
